{"version":3,"file":"static/js/249.33703608.chunk.js","mappings":"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","sources":["hooks/useInput.ts","components/Form/FormSelectTemplate.tsx","components/Form/Form.tsx","components/Table/TableBodyTemplate.tsx","components/Table/TableHeadTemplate.tsx","components/Table/Table.tsx","components/pages/MainPage/MainPage.tsx"],"sourcesContent":["import { useState } from 'react';\n\nimport { useAppDispatch } from '../app/hooks';\n\nimport { filterUsers } from '../app/slices/tableSlice';\n\n// /. imports\n\ninterface propTypes {\n    name: string;\n    value: string;\n}\n\n// /. interfaces\n\nexport function useInput(currentValue: string): any {\n    const [value, setValue] = useState<string>(currentValue);\n\n    const dispatch = useAppDispatch();\n\n    const onInputChange = (props: propTypes) => {\n        const { name, value } = props;\n\n        switch (name) {\n            case 'ID':\n                setValue(value.replace(/[^0-9]/g, ''));\n                dispatch(\n                    filterUsers({ name, value: value.replace(/[^0-9-]/g, '') })\n                );\n                break;\n            case 'FIO':\n                setValue(value.replace(/[^a-zA-Z\\s]/g, ''));\n                dispatch(\n                    filterUsers({\n                        name,\n                        value: value.replace(/[^a-zA-Z\\s]/g, '').trim()\n                    })\n                );\n                break;\n            case 'BIRTH':\n                setValue(value.replace(/[^0-9/]/g, ''));\n                dispatch(\n                    filterUsers({ name, value: value.replace(/[^0-9/]/g, '') })\n                );\n                break;\n            case 'PHONE':\n                setValue(value.replace(/[^0-9-)(.]/g, ''));\n                dispatch(\n                    filterUsers({\n                        name,\n                        value: value.replace(/[^0-9-)(.]/g, '')\n                    })\n                );\n                break;\n            default:\n                return;\n        }\n    };\n\n    return {\n        value,\n        onInputChange\n    };\n}\n","import React from 'react';\n\nimport { optionsTypes } from '../../Types/formSliceTypes';\n\nimport { useAppDispatch } from '../../app/hooks';\n\nimport { filterUsers } from '../../app/slices/tableSlice';\n\n// /. imports\n\ninterface propTypes {\n    id: string;\n    options: optionsTypes[];\n    isTableDataLoading: boolean;\n    status: string;\n}\n\n// /. interfaces\n\nconst FormSelectTemplate: React.FC<propTypes> = props => {\n    const { id, options, isTableDataLoading, status } = props;\n\n    const dispatch = useAppDispatch();\n\n    return (\n        <div className=\"form__template\">\n            <select\n                className=\"selection-menu\"\n                defaultValue={options[0].option}\n                onChange={e =>\n                    dispatch(filterUsers({ name: id, value: e.target.value }))\n                }\n                disabled={isTableDataLoading || status === 'failed'}\n            >\n                {options.map(item => {\n                    return (\n                        <option\n                            className=\"selection-menu__option\"\n                            key={item.id}\n                            value={item.option}\n                        >\n                            {item.option}\n                        </option>\n                    );\n                })}\n            </select>\n        </div>\n    );\n};\n\nexport default FormSelectTemplate;\n","import React from 'react';\n\nimport { useAppSelector } from '../../app/hooks';\n\nimport { useInput } from '../../hooks/useInput';\n\nimport FormSelectTemplate from './FormSelectTemplate';\n\nimport './form.scss';\n\n// /. imports\n\nconst Form: React.FC = () => {\n    const { formSelectTemplates } = useAppSelector(state => state.formSlice);\n    const { isTableDataLoading, status } = useAppSelector(\n        state => state.tableSlice\n    );\n\n    const inputID = useInput('');\n    const inputFIO = useInput('');\n    const inputBIRTH = useInput('');\n    const inputPHONE = useInput('');\n\n    const inputHandler = (\n        name: string,\n        e: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        switch (name) {\n            case 'ID':\n                inputID.onInputChange({ name, value: e.target.value });\n                break;\n            case 'FIO':\n                inputFIO.onInputChange({ name, value: e.target.value });\n                break;\n            case 'BIRTH':\n                inputBIRTH.onInputChange({ name, value: e.target.value });\n                break;\n            case 'PHONE':\n                inputPHONE.onInputChange({ name, value: e.target.value });\n                break;\n            default:\n                return;\n        }\n    };\n\n    return (\n        <form className=\"form\">\n            <fieldset className=\"form__wrapper\">\n                <div className=\"form__template\">\n                    <input\n                        className=\"form__input form__input--id\"\n                        type=\"text\"\n                        placeholder=\"ID\"\n                        value={inputID.value}\n                        onChange={e => inputHandler('ID', e)}\n                        onKeyDown={e => e.key === 'e' && e.preventDefault()}\n                        disabled={isTableDataLoading || status === 'failed'}\n                    />\n                </div>\n                <div className=\"form__template\">\n                    <input\n                        className=\"form__input\"\n                        type=\"text\"\n                        placeholder=\"ФИО\"\n                        value={inputFIO.value}\n                        onChange={e => inputHandler('FIO', e)}\n                        disabled={isTableDataLoading || status === 'failed'}\n                    />\n                </div>\n                <div className=\"form__template\">\n                    <input\n                        className=\"form__input\"\n                        type=\"text\"\n                        placeholder=\"Дата рождения\"\n                        value={inputBIRTH.value}\n                        onChange={e => inputHandler('BIRTH', e)}\n                        onKeyDown={e => e.key === 'e' && e.preventDefault()}\n                        disabled={isTableDataLoading || status === 'failed'}\n                    />\n                </div>\n                <div className=\"form__template\">\n                    <input\n                        className=\"form__input\"\n                        type=\"text\"\n                        placeholder=\"Телефон\"\n                        value={inputPHONE.value}\n                        onChange={e => inputHandler('PHONE', e)}\n                        onKeyDown={e => e.key === 'e' && e.preventDefault()}\n                        disabled={isTableDataLoading || status === 'failed'}\n                    />\n                </div>\n                <>\n                    {formSelectTemplates.map(item => {\n                        return (\n                            <FormSelectTemplate\n                                key={item.id}\n                                {...item}\n                                isTableDataLoading={isTableDataLoading}\n                                status={status}\n                            />\n                        );\n                    })}\n                </>\n            </fieldset>\n        </form>\n    );\n};\n\nexport default Form;\n","import React, { useState } from 'react';\n\nimport {\n    IoCloseCircleOutline,\n    IoCheckmarkCircleOutline\n} from 'react-icons/io5';\n\n// /. imports\n\ninterface propTypes {\n    id: number;\n    name: string;\n    birth: string;\n    phone: string;\n    filial: string;\n    isPaid: boolean;\n    status: string;\n}\n\n// /. interfaces\n\nconst TableBodyTemplate: React.FC<propTypes> = props => {\n    const { id, name, birth, phone, filial, isPaid, status } = props;\n\n    const [statuses] = useState<{ [key: string]: string }>({\n        Закрыта: 'close',\n        Новая: 'active',\n        'В обработке': 'progress'\n    });\n\n    return (\n        <tr\n            key={id}\n            className=\"table__row\"\n        >\n            <td className=\"table__cell table__cell--id\">{id}</td>\n            <td className=\"table__cell table__cell--name\">{name}</td>\n            <td className=\"table__cell table__cell--birth\">{birth}</td>\n            <td className=\"table__cell table__cell--phone\">{phone}</td>\n            <td className=\"table__cell table__cell--filial\">{filial}</td>\n            <td className=\"table__cell table__cell--paid\">\n                {isPaid ? (\n                    <IoCheckmarkCircleOutline\n                        size={'24px'}\n                        color={'green'}\n                    />\n                ) : (\n                    <IoCloseCircleOutline\n                        size={'24px'}\n                        color={'red'}\n                    />\n                )}\n            </td>\n            <td\n                className={`table__cell table__cell--status ${statuses[status]}`}\n            >\n                {status}\n            </td>\n        </tr>\n    );\n};\n\nexport default TableBodyTemplate;\n","import React, { useState } from 'react';\n\nimport { FaSortDown } from 'react-icons/fa';\n\nimport { TiArrowSortedUp } from 'react-icons/ti';\n\nimport { useAppDispatch } from '../../app/hooks';\n\nimport { sortUsersByASC, sortUsersByDSC } from '../../app/slices/tableSlice';\n\n// /. imports\n\ninterface propTypes {\n    name: string;\n    text: string;\n    isTableDataLoading: boolean;\n    isUsersDataEmpty: boolean;\n    fetchUsersErrMsg: string;\n}\n\n// /. interfaces\n\nconst TableHeadTemplate: React.FC<propTypes> = props => {\n    const {\n        name,\n        text,\n        isTableDataLoading,\n        isUsersDataEmpty,\n        fetchUsersErrMsg\n    } = props;\n\n    const [sortOder, setSetOrder] = useState<string>('DSC');\n    const [statuses, setStatus] = useState<{ [key: string]: boolean }>({\n        id: false,\n        fio: false,\n        birth: false,\n        phone: false,\n        filial: false,\n        isPaid: false,\n        status: false\n    });\n\n    const dispatch = useAppDispatch();\n\n    const iconHandler = (name: string): void => {\n        switch (name) {\n            case 'id':\n                setStatus(() => ({ ...statuses, id: !statuses.id }));\n                break;\n            case 'fio':\n                setStatus(() => ({ ...statuses, fio: !statuses.fio }));\n                break;\n            case 'birth':\n                setStatus(() => ({ ...statuses, birth: !statuses.birth }));\n                break;\n            case 'phone':\n                setStatus(() => ({ ...statuses, phone: !statuses.phone }));\n                break;\n            case 'filial':\n                setStatus(() => ({ ...statuses, filial: !statuses.filial }));\n                break;\n            case 'isPaid':\n                setStatus(() => ({ ...statuses, isPaid: !statuses.isPaid }));\n                break;\n            case 'status':\n                setStatus(() => ({ ...statuses, status: !statuses.status }));\n                break;\n            default:\n                return;\n        }\n    };\n\n    const sortUsersData = (name: string): void => {\n        if (sortOder === 'ASC') {\n            setSetOrder('DSC');\n            dispatch(sortUsersByASC({ sortOpt: name }));\n        } else if (sortOder === 'DSC') {\n            setSetOrder('ASC');\n            dispatch(sortUsersByDSC({ sortOpt: name }));\n        }\n        iconHandler(name);\n    };\n\n    return (\n        <th\n            className=\"table__col table__col--head\"\n            onClick={() =>\n                !isTableDataLoading && !fetchUsersErrMsg && sortUsersData(name)\n            }\n        >\n            {text}\n            {!isTableDataLoading && !isUsersDataEmpty && statuses[name] ? (\n                <TiArrowSortedUp />\n            ) : (\n                <FaSortDown />\n            )}\n        </th>\n    );\n};\n\nexport default TableHeadTemplate;\n","import React, { useEffect } from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport Preloader from '../common/Preloader/Preloader';\n\nimport { swithUsersDataEmptyStatus } from '../../app/slices/tableSlice';\n\nimport TableBodyTemplate from './TableBodyTemplate';\nimport TableHeadTemplate from './TableHeadTemplate';\n\nimport './table.scss';\n\n// /. imports\n\nconst Table: React.FC = () => {\n    const {\n        tableData,\n        isTableDataLoading,\n        fetchUsersErrMsg,\n        isUsersDataEmpty,\n        tableHeadTemplate\n    } = useAppSelector(state => state.tableSlice);\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        tableData.length === 0\n            ? dispatch(swithUsersDataEmptyStatus(true))\n            : dispatch(swithUsersDataEmptyStatus(false));\n    }, [tableData]);\n\n    return (\n        <div className=\"table-wrapper\">\n            <table className=\"table\">\n                <thead className=\"table__head sticky\">\n                    <tr className=\"table__row table__row--head\">\n                        {tableHeadTemplate.map(item => {\n                            return (\n                                <TableHeadTemplate\n                                    key={item.id}\n                                    {...item}\n                                    isTableDataLoading={isTableDataLoading}\n                                    isUsersDataEmpty={isUsersDataEmpty}\n                                    fetchUsersErrMsg={fetchUsersErrMsg}\n                                />\n                            );\n                        })}\n                    </tr>\n                </thead>\n                <tbody\n                    className={\n                        isTableDataLoading\n                            ? 'table__body loading'\n                            : isUsersDataEmpty\n                            ? 'table__body empty'\n                            : 'table__body'\n                    }\n                >\n                    {isTableDataLoading ? (\n                        <div className=\"table__preloader\">\n                            <Preloader />\n                        </div>\n                    ) : (\n                        <>\n                            {tableData.map(item => {\n                                return (\n                                    <TableBodyTemplate\n                                        key={item.id}\n                                        {...item}\n                                    />\n                                );\n                            })}\n                        </>\n                    )}\n                    {!isTableDataLoading && fetchUsersErrMsg && (\n                        <span className=\"error-message\">\n                            Error: {fetchUsersErrMsg}\n                        </span>\n                    )}\n                    {!isTableDataLoading &&\n                    !fetchUsersErrMsg &&\n                    isUsersDataEmpty ? (\n                        <span className=\"message\">No matches!</span>\n                    ) : (\n                        <></>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\n\nimport { IoDocumentTextOutline } from 'react-icons/io5';\n\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\n\nimport Form from '../../Form/Form';\nimport Table from '../../Table/Table';\n\nimport { setRequestCount, filterUsers } from '../../../app/slices/tableSlice';\n\nimport './mainPage.scss';\n\n// /. imports\n\nconst MainPage: React.FC = () => {\n    const { requestСount, isTableDataLoading, tableData, isMainPage } =\n        useAppSelector(state => state.tableSlice);\n\n    const [text, setText] = useState<string>('заявок');\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        dispatch(setRequestCount(tableData.length));\n        if (requestСount >= 5 || requestСount === 0) {\n            setText('заявок');\n        } else if (requestСount >= 2 || requestСount <= 4) {\n            setText('заявки');\n        } else if (requestСount === 1) {\n            setText('заявка');\n        }\n    }, [requestСount, tableData]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(filterUsers({ name: 'ID', value: '' }));\n            dispatch(filterUsers({ name: 'FIO', value: '' }));\n            dispatch(filterUsers({ name: 'BIRTH', value: '' }));\n            dispatch(filterUsers({ name: 'PHONE', value: '' }));\n        };\n    }, [isMainPage]);\n\n    return (\n        <section className=\"main-page\">\n            <div className=\"main-page__wrapper\">\n                <div className=\"result\">\n                    <div className=\"result__wrapper\">\n                        <IoDocumentTextOutline\n                            size={'34px'}\n                            color={'#000'}\n                        />\n                        <h1 className=\"result__text\">\n                            {isTableDataLoading ? '0' : requestСount} {text}\n                        </h1>\n                    </div>\n                </div>\n                <Form />\n                <Table />\n            </div>\n        </section>\n    );\n};\n\nexport default MainPage;\n"],"names":["useInput","currentValue","useState","value","setValue","dispatch","useAppDispatch","onInputChange","props","name","replace","filterUsers","trim","id","options","isTableDataLoading","status","className","defaultValue","option","onChange","e","target","disabled","map","item","formSelectTemplates","useAppSelector","state","formSlice","tableSlice","inputID","inputFIO","inputBIRTH","inputPHONE","inputHandler","type","placeholder","onKeyDown","key","preventDefault","birth","phone","filial","isPaid","Закрыта","Новая","statuses","size","color","text","isUsersDataEmpty","fetchUsersErrMsg","sortOder","setSetOrder","fio","setStatus","sortUsersData","sortUsersByASC","sortOpt","sortUsersByDSC","iconHandler","onClick","tableData","tableHeadTemplate","useEffect","length","swithUsersDataEmptyStatus","Preloader","requestСount","isMainPage","setText","setRequestCount"],"sourceRoot":""}