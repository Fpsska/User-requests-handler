{"version":3,"file":"static/js/249.6c2c76e9.chunk.js","mappings":"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","sources":["hooks/useInput.ts","components/Form/FormSelectTemplate.tsx","components/Form/Form.tsx","components/Table/TableBodyTemplate.tsx","components/Table/TableHeadTemplate.tsx","components/Table/Table.tsx","components/pages/MainPage/MainPage.tsx"],"sourcesContent":["import { useState } from 'react';\n\nimport { useAppDispatch } from '../app/hooks';\n\nimport { filterUsers } from '../app/slices/tableSlice';\n\n// /. imports\n\ninterface propTypes {\n    name: string;\n    value: string;\n}\n\n// /. interfaces\n\nexport function useInput(currentValue: string): any {\n    const [value, setValue] = useState<string>(currentValue);\n\n    const dispatch = useAppDispatch();\n\n    const onInputChange = (props: propTypes) => {\n        const { name, value } = props;\n\n        switch (name) {\n            case 'ID':\n                setValue(value.replace(/[^0-9]/g, ''));\n                dispatch(\n                    filterUsers({\n                        filterProp: name,\n                        value: value.replace(/[^0-9-]/g, '')\n                    })\n                );\n                break;\n            case 'FIO':\n                setValue(value.replace(/[^a-zA-Z\\s]/g, ''));\n                dispatch(\n                    filterUsers({\n                        filterProp: name,\n                        value: value.replace(/[^a-zA-Z\\s]/g, '').trim()\n                    })\n                );\n                break;\n            case 'BIRTH':\n                setValue(value.replace(/[^0-9/]/g, ''));\n                dispatch(\n                    filterUsers({\n                        filterProp: name,\n                        value: value.replace(/[^0-9/]/g, '')\n                    })\n                );\n                break;\n            case 'PHONE':\n                setValue(value.replace(/[^0-9-)(.]/g, ''));\n                dispatch(\n                    filterUsers({\n                        filterProp: name,\n                        value: value.replace(/[^0-9-)(.]/g, '')\n                    })\n                );\n                break;\n            default:\n                return;\n        }\n    };\n\n    return {\n        value,\n        setValue,\n        onInputChange\n    };\n}\n","import React from 'react';\n\nimport { optionsTypes } from '../../Types/formSliceTypes';\n\nimport { useAppDispatch } from '../../app/hooks';\n\nimport { filterUsers } from '../../app/slices/tableSlice';\n\n// /. imports\n\ninterface propTypes {\n    id: string;\n    options: optionsTypes[];\n    isTableDataLoading: boolean;\n    status: string;\n    role: string;\n}\n\n// /. interfaces\n\nconst FormSelectTemplate: React.FC<propTypes> = props => {\n    const { id, options, isTableDataLoading, status, role } = props;\n\n    const dispatch = useAppDispatch();\n\n    const onSelectChange = (eventVal: string): void => {\n        dispatch(filterUsers({ filterProp: id, value: eventVal }));\n    };\n\n    return (\n        <select\n            className={`${role ? role : ''} selection-menu`}\n            defaultValue={options[0].option}\n            onChange={e => onSelectChange(e.target.value)}\n            disabled={isTableDataLoading || status === 'failed'}\n        >\n            {options.map(item => {\n                return (\n                    <option\n                        className=\"selection-menu__option\"\n                        key={item.id}\n                        value={item.option}\n                    >\n                        {item.option}\n                    </option>\n                );\n            })}\n        </select>\n    );\n};\n\nexport default FormSelectTemplate;\n","import React, { useEffect, useRef } from 'react';\n\nimport { useAppSelector } from '../../app/hooks';\n\nimport { useInput } from '../../hooks/useInput';\n\nimport FormSelectTemplate from './FormSelectTemplate';\n\nimport './form.scss';\n\n// /. imports\n\nconst Form: React.FC = () => {\n    const { formSelectTemplates } = useAppSelector(state => state.formSlice);\n    const { isTableDataLoading, status } = useAppSelector(\n        state => state.tableSlice\n    );\n\n    const inputID = useInput('');\n    const inputFIO = useInput('');\n    const inputBIRTH = useInput('');\n    const inputPHONE = useInput('');\n\n    const inputIdRef = useRef<HTMLInputElement>(null!);\n\n    const inputHandler = (\n        name: string,\n        e: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        switch (name) {\n            case 'ID':\n                inputID.onInputChange({ name, value: e.target.value });\n\n                inputFIO.setValue('');\n                inputBIRTH.setValue('');\n                inputPHONE.setValue('');\n                break;\n            case 'FIO':\n                inputFIO.onInputChange({ name, value: e.target.value });\n\n                inputID.setValue('');\n                inputBIRTH.setValue('');\n                inputPHONE.setValue('');\n                break;\n            case 'BIRTH':\n                inputBIRTH.onInputChange({ name, value: e.target.value });\n\n                inputID.setValue('');\n                inputFIO.setValue('');\n                inputPHONE.setValue('');\n                break;\n            case 'PHONE':\n                inputPHONE.onInputChange({ name, value: e.target.value });\n\n                inputID.setValue('');\n                inputFIO.setValue('');\n                inputBIRTH.setValue('');\n                break;\n            default:\n                return;\n        }\n    };\n\n    useEffect(() => {\n        if (!isTableDataLoading && inputIdRef.current) {\n            inputIdRef.current.focus();\n        }\n    }, [isTableDataLoading, inputIdRef]);\n\n    return (\n        <form className=\"form\">\n            <fieldset className=\"form__wrapper\">\n                <input\n                    className=\"form__input form__input--id\"\n                    ref={inputIdRef}\n                    type=\"text\"\n                    placeholder=\"ID\"\n                    value={inputID.value}\n                    onChange={e => inputHandler('ID', e)}\n                    onKeyDown={e => e.key === 'e' && e.preventDefault()}\n                    disabled={isTableDataLoading || status === 'failed'}\n                />\n                <input\n                    className=\"form__input\"\n                    type=\"text\"\n                    placeholder=\"ФИО\"\n                    value={inputFIO.value}\n                    onChange={e => inputHandler('FIO', e)}\n                    disabled={isTableDataLoading || status === 'failed'}\n                />\n                <input\n                    className=\"form__input\"\n                    type=\"text\"\n                    placeholder=\"Дата рождения\"\n                    value={inputBIRTH.value}\n                    onChange={e => inputHandler('BIRTH', e)}\n                    onKeyDown={e => e.key === 'e' && e.preventDefault()}\n                    disabled={isTableDataLoading || status === 'failed'}\n                />\n                <input\n                    className=\"form__input\"\n                    type=\"text\"\n                    placeholder=\"Телефон\"\n                    value={inputPHONE.value}\n                    onChange={e => inputHandler('PHONE', e)}\n                    onKeyDown={e => e.key === 'e' && e.preventDefault()}\n                    disabled={isTableDataLoading || status === 'failed'}\n                />\n                <>\n                    {formSelectTemplates.map(item => {\n                        return (\n                            <FormSelectTemplate\n                                key={item.id}\n                                {...item}\n                                role={'form__selection-menu'}\n                                isTableDataLoading={isTableDataLoading}\n                                status={status}\n                            />\n                        );\n                    })}\n                </>\n            </fieldset>\n        </form>\n    );\n};\n\nexport default Form;\n","import React, { useState } from 'react';\n\nimport {\n    IoCloseCircleOutline,\n    IoCheckmarkCircleOutline\n} from 'react-icons/io5';\n\n// /. imports\n\ninterface propTypes {\n    id: number;\n    name: string;\n    birth: string;\n    phone: string;\n    filial: string;\n    isPaid: boolean;\n    status: string;\n}\n\n// /. interfaces\n\nconst TableBodyTemplate: React.FC<propTypes> = props => {\n    const { id, name, birth, phone, filial, isPaid, status } = props;\n\n    const [statuses] = useState<{ [key: string]: string }>({\n        Закрыта: 'close',\n        Новая: 'active',\n        'В обработке': 'progress'\n    });\n\n    return (\n        <tr\n            key={id}\n            className=\"table__row\"\n        >\n            <td className=\"table__cell table__cell--id\">{id}</td>\n            <td className=\"table__cell table__cell--name\">{name}</td>\n            <td className=\"table__cell table__cell--birth\">{birth}</td>\n            <td className=\"table__cell table__cell--phone\">{phone}</td>\n            <td className=\"table__cell table__cell--filial\">{filial}</td>\n            <td className=\"table__cell table__cell--paid\">\n                {isPaid ? (\n                    <IoCheckmarkCircleOutline\n                        size={'24px'}\n                        color={'green'}\n                    />\n                ) : (\n                    <IoCloseCircleOutline\n                        size={'24px'}\n                        color={'red'}\n                    />\n                )}\n            </td>\n            <td\n                className={`table__cell table__cell--status ${statuses[status]}`}\n            >\n                {status}\n            </td>\n        </tr>\n    );\n};\n\nexport default TableBodyTemplate;\n","import React, { useState } from 'react';\n\nimport { FaSortDown } from 'react-icons/fa';\n\nimport { TiArrowSortedUp } from 'react-icons/ti';\n\nimport { useAppDispatch } from '../../app/hooks';\n\nimport { sortUsersByASC, sortUsersByDSC } from '../../app/slices/tableSlice';\n\n// /. imports\n\ninterface propTypes {\n    name: string;\n    text: string;\n    isTableDataLoading: boolean;\n    isUsersDataEmpty: boolean;\n    fetchUsersErrMsg: string;\n}\n\n// /. interfaces\n\nconst TableHeadTemplate: React.FC<propTypes> = props => {\n    const {\n        name,\n        text,\n        isTableDataLoading,\n        isUsersDataEmpty,\n        fetchUsersErrMsg\n    } = props;\n\n    const [sortOder, setSetOrder] = useState<string>('DSC');\n    const [statuses, setStatus] = useState<{ [key: string]: boolean }>({\n        id: false,\n        fio: false,\n        birth: false,\n        phone: false,\n        filial: false,\n        isPaid: false,\n        status: false\n    });\n\n    const dispatch = useAppDispatch();\n\n    const iconHandler = (name: string): void => {\n        switch (name) {\n            case 'id':\n                setStatus(() => ({ ...statuses, id: !statuses.id }));\n                break;\n            case 'fio':\n                setStatus(() => ({ ...statuses, fio: !statuses.fio }));\n                break;\n            case 'birth':\n                setStatus(() => ({ ...statuses, birth: !statuses.birth }));\n                break;\n            case 'phone':\n                setStatus(() => ({ ...statuses, phone: !statuses.phone }));\n                break;\n            case 'filial':\n                setStatus(() => ({ ...statuses, filial: !statuses.filial }));\n                break;\n            case 'isPaid':\n                setStatus(() => ({ ...statuses, isPaid: !statuses.isPaid }));\n                break;\n            case 'status':\n                setStatus(() => ({ ...statuses, status: !statuses.status }));\n                break;\n            default:\n                return;\n        }\n    };\n\n    const sortUsersData = (name: string): void => {\n        if (sortOder === 'DSC') {\n            setSetOrder('ASC');\n            dispatch(sortUsersByDSC({ sortOpt: name }));\n        } else if (sortOder === 'ASC') {\n            setSetOrder('DSC');\n            dispatch(sortUsersByASC({ sortOpt: name }));\n        }\n        iconHandler(name);\n    };\n\n    return (\n        <th\n            className=\"table__col table__col--head\"\n            onClick={() =>\n                !isTableDataLoading && !fetchUsersErrMsg && sortUsersData(name)\n            }\n        >\n            {text}\n            {!isTableDataLoading && !isUsersDataEmpty && statuses[name] ? (\n                <TiArrowSortedUp />\n            ) : (\n                <FaSortDown />\n            )}\n        </th>\n    );\n};\n\nexport default TableHeadTemplate;\n","import React, { useEffect } from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport Preloader from '../common/Preloader/Preloader';\n\nimport { swithUsersDataEmptyStatus } from '../../app/slices/tableSlice';\n\nimport TableBodyTemplate from './TableBodyTemplate';\nimport TableHeadTemplate from './TableHeadTemplate';\n\nimport './table.scss';\n\n// /. imports\n\nconst Table: React.FC = () => {\n    const {\n        filteredTableData,\n        isTableDataLoading,\n        fetchUsersErrMsg,\n        isUsersDataEmpty,\n        tableHeadTemplate\n    } = useAppSelector(state => state.tableSlice);\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        filteredTableData.length === 0\n            ? dispatch(swithUsersDataEmptyStatus(true))\n            : dispatch(swithUsersDataEmptyStatus(false));\n    }, [filteredTableData]);\n\n    return (\n        <div className=\"table-wrapper\">\n            <table className=\"table\">\n                <thead className=\"table__head sticky\">\n                    <tr className=\"table__row table__row--head\">\n                        {tableHeadTemplate.map(item => {\n                            return (\n                                <TableHeadTemplate\n                                    key={item.id}\n                                    {...item}\n                                    isTableDataLoading={isTableDataLoading}\n                                    isUsersDataEmpty={isUsersDataEmpty}\n                                    fetchUsersErrMsg={fetchUsersErrMsg}\n                                />\n                            );\n                        })}\n                    </tr>\n                </thead>\n                <tbody\n                    className={\n                        isTableDataLoading\n                            ? 'table__body loading'\n                            : isUsersDataEmpty\n                            ? 'table__body empty'\n                            : 'table__body'\n                    }\n                >\n                    {isTableDataLoading ? (\n                        <div className=\"table__preloader\">\n                            <Preloader />\n                        </div>\n                    ) : (\n                        <>\n                            {filteredTableData.map(item => {\n                                return (\n                                    <TableBodyTemplate\n                                        key={item.id}\n                                        {...item}\n                                    />\n                                );\n                            })}\n                        </>\n                    )}\n                    {!isTableDataLoading && fetchUsersErrMsg && (\n                        <span className=\"error-message\">\n                            Error: {fetchUsersErrMsg}\n                        </span>\n                    )}\n                    {!isTableDataLoading &&\n                    !fetchUsersErrMsg &&\n                    isUsersDataEmpty ? (\n                        <span className=\"message\">No matches!</span>\n                    ) : (\n                        <></>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\n\nimport { IoDocumentTextOutline } from 'react-icons/io5';\n\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\n\nimport Form from '../../Form/Form';\nimport Table from '../../Table/Table';\n\nimport { setRequestCount, filterUsers } from '../../../app/slices/tableSlice';\n\nimport './mainPage.scss';\n\n// /. imports\n\nconst MainPage: React.FC = () => {\n    const { requestСount, isTableDataLoading, tableData, isMainPage } =\n        useAppSelector(state => state.tableSlice);\n\n    const [text, setText] = useState<string>('заявок');\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        dispatch(setRequestCount(tableData.length));\n        if (requestСount >= 5 || requestСount === 0) {\n            setText('заявок');\n        } else if (requestСount >= 2 || requestСount <= 4) {\n            setText('заявки');\n        } else if (requestСount === 1) {\n            setText('заявка');\n        }\n    }, [requestСount, tableData]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(filterUsers({ filterProp: 'ID', value: '' }));\n            dispatch(filterUsers({ filterProp: 'FIO', value: '' }));\n            dispatch(filterUsers({ filterProp: 'BIRTH', value: '' }));\n            dispatch(filterUsers({ filterProp: 'PHONE', value: '' }));\n        };\n    }, [isMainPage]);\n\n    return (\n        <section className=\"main-page\">\n            <div className=\"main-page__wrapper\">\n                <div className=\"result\">\n                    <div className=\"result__wrapper\">\n                        <IoDocumentTextOutline\n                            size={'34px'}\n                            color={'#000'}\n                        />\n                        <h1 className=\"result__text\">\n                            {isTableDataLoading ? '0' : requestСount} {text}\n                        </h1>\n                    </div>\n                </div>\n                <Form />\n                <Table />\n            </div>\n        </section>\n    );\n};\n\nexport default MainPage;\n"],"names":["useInput","currentValue","useState","value","setValue","dispatch","useAppDispatch","onInputChange","props","name","replace","filterUsers","filterProp","trim","id","options","isTableDataLoading","status","role","className","defaultValue","option","onChange","e","eventVal","target","disabled","map","item","formSelectTemplates","useAppSelector","state","formSlice","tableSlice","inputID","inputFIO","inputBIRTH","inputPHONE","inputIdRef","useRef","inputHandler","useEffect","current","focus","ref","type","placeholder","onKeyDown","key","preventDefault","birth","phone","filial","isPaid","Закрыта","Новая","statuses","size","color","text","isUsersDataEmpty","fetchUsersErrMsg","sortOder","setSetOrder","fio","setStatus","sortUsersData","sortUsersByDSC","sortOpt","sortUsersByASC","iconHandler","onClick","filteredTableData","tableHeadTemplate","length","swithUsersDataEmptyStatus","Preloader","requestСount","tableData","isMainPage","setText","setRequestCount"],"sourceRoot":""}