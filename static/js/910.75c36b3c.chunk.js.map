{"version":3,"file":"static/js/910.75c36b3c.chunk.js","mappings":"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","sources":["utils/hooks/useInput.ts","components/ui/Form/FormSelectTemplate.tsx","components/ui/Form/Form.tsx","components/ui/Table/TableBodyTemplate.tsx","components/ui/Table/TableHeadTemplate.tsx","components/ui/Table/Table.tsx","pages/MainPage/MainPage.tsx","utils/helpers/declinateByCount.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport { useAppDispatch } from 'app/hooks';\r\n\r\nimport { filterUsers } from 'app/slices/tableSlice';\r\n\r\n// /. imports\r\n\r\ninterface propTypes {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\n// /. interfaces\r\n\r\nexport function useInput(): any {\r\n    const [value, setValue] = useState<string>('');\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const onInputChange = (props: propTypes) => {\r\n        const { name, value } = props;\r\n\r\n        switch (name) {\r\n            case 'ID':\r\n                setValue(value.replace(/[^0-9]/g, ''));\r\n                dispatch(\r\n                    filterUsers({\r\n                        filterProp: name,\r\n                        value: value.replace(/[^0-9-]/g, '')\r\n                    })\r\n                );\r\n                break;\r\n            case 'FIO':\r\n                setValue(value.replace(/[^a-zA-Z\\s]/g, ''));\r\n                dispatch(\r\n                    filterUsers({\r\n                        filterProp: name,\r\n                        value: value.replace(/[^a-zA-Z\\s]/g, '').trim()\r\n                    })\r\n                );\r\n                break;\r\n            case 'BIRTH':\r\n                setValue(value.replace(/[^0-9/]/g, ''));\r\n                dispatch(\r\n                    filterUsers({\r\n                        filterProp: name,\r\n                        value: value.replace(/[^0-9/]/g, '')\r\n                    })\r\n                );\r\n                break;\r\n            case 'PHONE':\r\n                setValue(value.replace(/[^0-9-)(.]/g, ''));\r\n                dispatch(\r\n                    filterUsers({\r\n                        filterProp: name,\r\n                        value: value.replace(/[^0-9-)(.]/g, '')\r\n                    })\r\n                );\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    return {\r\n        value,\r\n        setValue,\r\n        onInputChange\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\nimport { Ioption } from '../../../types/formSliceTypes';\r\n\r\nimport { useAppDispatch } from '../../../app/hooks';\r\n\r\nimport { filterUsers } from '../../../app/slices/tableSlice';\r\n\r\n// /. imports\r\n\r\ninterface propTypes {\r\n    id: string;\r\n    options: Ioption[];\r\n    isTableDataLoading: boolean;\r\n    status: string;\r\n    role: string;\r\n}\r\n\r\n// /. interfaces\r\n\r\nconst FormSelectTemplate: React.FC<propTypes> = props => {\r\n    const { id, options, isTableDataLoading, status, role } = props;\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const onSelectChange = (eventVal: string): void => {\r\n        dispatch(filterUsers({ filterProp: id, value: eventVal }));\r\n    };\r\n\r\n    return (\r\n        <select\r\n            className={`${role ? role : ''} selection-menu`}\r\n            defaultValue={options[0].option}\r\n            onChange={e => onSelectChange(e.target.value)}\r\n            disabled={isTableDataLoading || status === 'failed'}\r\n        >\r\n            {options.map(item => {\r\n                return (\r\n                    <option\r\n                        className=\"selection-menu__option\"\r\n                        key={item.id}\r\n                        value={item.option}\r\n                    >\r\n                        {item.option}\r\n                    </option>\r\n                );\r\n            })}\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default FormSelectTemplate;\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nimport { useAppSelector } from '../../../app/hooks';\r\n\r\nimport { useInput } from '../../../utils/hooks/useInput';\r\n\r\nimport FormSelectTemplate from './FormSelectTemplate';\r\n\r\nimport './form.scss';\r\n\r\n// /. imports\r\n\r\nconst Form: React.FC = () => {\r\n    const { formSelectTemplates } = useAppSelector(state => state.formSlice);\r\n    const { isTableDataLoading, fetchUsersStatus } = useAppSelector(\r\n        state => state.tableSlice\r\n    );\r\n\r\n    const inputID = useInput();\r\n    const inputFIO = useInput();\r\n    const inputBIRTH = useInput();\r\n    const inputPHONE = useInput();\r\n\r\n    const inputIdRef = useRef<HTMLInputElement>(null!);\r\n\r\n    const inputHandler = (\r\n        name: string,\r\n        e: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        switch (name) {\r\n            case 'ID':\r\n                inputID.onInputChange({\r\n                    name,\r\n                    value: e.target.value\r\n                });\r\n\r\n                inputFIO.setValue('');\r\n                inputBIRTH.setValue('');\r\n                inputPHONE.setValue('');\r\n                break;\r\n            case 'FIO':\r\n                inputFIO.onInputChange({ name, value: e.target.value });\r\n\r\n                inputID.setValue('');\r\n                inputBIRTH.setValue('');\r\n                inputPHONE.setValue('');\r\n                break;\r\n            case 'BIRTH':\r\n                inputBIRTH.onInputChange({ name, value: e.target.value });\r\n\r\n                inputID.setValue('');\r\n                inputFIO.setValue('');\r\n                inputPHONE.setValue('');\r\n                break;\r\n            case 'PHONE':\r\n                inputPHONE.onInputChange({ name, value: e.target.value });\r\n\r\n                inputID.setValue('');\r\n                inputFIO.setValue('');\r\n                inputBIRTH.setValue('');\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isTableDataLoading && inputIdRef.current) {\r\n            inputIdRef.current.focus();\r\n        }\r\n    }, [isTableDataLoading, inputIdRef]);\r\n\r\n    return (\r\n        <form className=\"form\">\r\n            <fieldset className=\"form__wrapper\">\r\n                <input\r\n                    className=\"form__input form__input--id\"\r\n                    type=\"text\"\r\n                    placeholder=\"ID\"\r\n                    value={inputID.value}\r\n                    onChange={e => inputHandler('ID', e)}\r\n                    onKeyDown={e => e.key === 'e' && e.preventDefault()}\r\n                    disabled={\r\n                        isTableDataLoading || fetchUsersStatus === 'failed'\r\n                    }\r\n                />\r\n                <input\r\n                    className=\"form__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"ФИО\"\r\n                    value={inputFIO.value}\r\n                    onChange={e => inputHandler('FIO', e)}\r\n                    disabled={\r\n                        isTableDataLoading || fetchUsersStatus === 'failed'\r\n                    }\r\n                />\r\n                <input\r\n                    className=\"form__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Дата рождения\"\r\n                    value={inputBIRTH.value}\r\n                    onChange={e => inputHandler('BIRTH', e)}\r\n                    onKeyDown={e => e.key === 'e' && e.preventDefault()}\r\n                    disabled={\r\n                        isTableDataLoading || fetchUsersStatus === 'failed'\r\n                    }\r\n                />\r\n                <input\r\n                    className=\"form__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Телефон\"\r\n                    value={inputPHONE.value}\r\n                    onChange={e => inputHandler('PHONE', e)}\r\n                    onKeyDown={e => e.key === 'e' && e.preventDefault()}\r\n                    disabled={\r\n                        isTableDataLoading || fetchUsersStatus === 'failed'\r\n                    }\r\n                />\r\n                <>\r\n                    {formSelectTemplates.map(item => {\r\n                        return (\r\n                            <FormSelectTemplate\r\n                                key={item.id}\r\n                                {...item}\r\n                                role={'form__selection-menu'}\r\n                                isTableDataLoading={isTableDataLoading}\r\n                                status={fetchUsersStatus}\r\n                            />\r\n                        );\r\n                    })}\r\n                </>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n    IoCloseCircleOutline,\r\n    IoCheckmarkCircleOutline\r\n} from 'react-icons/io5';\r\n\r\n// /. imports\r\n\r\ninterface propTypes {\r\n    id: number;\r\n    name: string;\r\n    birth: string;\r\n    phone: string;\r\n    filial: string;\r\n    isPaid: boolean;\r\n    status: string;\r\n}\r\n\r\n// /. interfaces\r\n\r\nconst TableBodyTemplate: React.FC<propTypes> = props => {\r\n    const { id, name, birth, phone, filial, isPaid, status } = props;\r\n\r\n    const [statuses] = useState<{ [key: string]: string }>({\r\n        Закрыта: 'close',\r\n        Новая: 'active',\r\n        'В обработке': 'progress'\r\n    });\r\n\r\n    return (\r\n        <tr\r\n            key={id}\r\n            className=\"table__row\"\r\n        >\r\n            <td className=\"table__cell table__cell--id\">{id}</td>\r\n            <td className=\"table__cell table__cell--name\">{name}</td>\r\n            <td className=\"table__cell table__cell--birth\">{birth}</td>\r\n            <td className=\"table__cell table__cell--phone\">{phone}</td>\r\n            <td className=\"table__cell table__cell--filial\">{filial}</td>\r\n            <td className=\"table__cell table__cell--paid\">\r\n                {isPaid ? (\r\n                    <IoCheckmarkCircleOutline\r\n                        size={'24px'}\r\n                        color={'green'}\r\n                    />\r\n                ) : (\r\n                    <IoCloseCircleOutline\r\n                        size={'24px'}\r\n                        color={'red'}\r\n                    />\r\n                )}\r\n            </td>\r\n            <td\r\n                className={`table__cell table__cell--status ${statuses[status]}`}\r\n            >\r\n                {status}\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default TableBodyTemplate;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { FaSortDown } from 'react-icons/fa';\r\n\r\nimport { TiArrowSortedUp } from 'react-icons/ti';\r\n\r\nimport { useAppDispatch } from 'app/hooks';\r\n\r\nimport { sortUsersByASC, sortUsersByDSC } from 'app/slices/tableSlice';\r\n\r\n// /. imports\r\n\r\ninterface propTypes {\r\n    name: string;\r\n    text: string;\r\n    isTableDataLoading: boolean;\r\n    isUsersDataEmpty: boolean;\r\n    fetchUsersErrMsg: string | null;\r\n    dataLength: number;\r\n}\r\n\r\n// /. interfaces\r\n\r\nconst TableHeadTemplate: React.FC<propTypes> = props => {\r\n    const {\r\n        name,\r\n        text,\r\n        isTableDataLoading,\r\n        isUsersDataEmpty,\r\n        fetchUsersErrMsg,\r\n        dataLength\r\n    } = props;\r\n\r\n    const [sortOder, setSetOrder] = useState<string>('DSC');\r\n    const [isValidCondition, setValidConditionStatus] =\r\n        useState<boolean>(false);\r\n    const [statuses, setStatus] = useState<{ [key: string]: boolean }>({\r\n        id: false,\r\n        fio: false,\r\n        birth: false,\r\n        phone: false,\r\n        filial: false,\r\n        isPaid: false,\r\n        status: false\r\n    });\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    // /. hooks\r\n\r\n    const iconHandler = (name: string): void => {\r\n        switch (name) {\r\n            case 'id':\r\n                setStatus(() => ({ ...statuses, id: !statuses.id }));\r\n                break;\r\n            case 'fio':\r\n                setStatus(() => ({ ...statuses, fio: !statuses.fio }));\r\n                break;\r\n            case 'birth':\r\n                setStatus(() => ({ ...statuses, birth: !statuses.birth }));\r\n                break;\r\n            case 'phone':\r\n                setStatus(() => ({ ...statuses, phone: !statuses.phone }));\r\n                break;\r\n            case 'filial':\r\n                setStatus(() => ({ ...statuses, filial: !statuses.filial }));\r\n                break;\r\n            case 'isPaid':\r\n                setStatus(() => ({ ...statuses, isPaid: !statuses.isPaid }));\r\n                break;\r\n            case 'status':\r\n                setStatus(() => ({ ...statuses, status: !statuses.status }));\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const sortUsersData = (name: string): void => {\r\n        if (sortOder === 'DSC') {\r\n            setSetOrder('ASC');\r\n            dispatch(sortUsersByDSC({ sortOpt: name }));\r\n        } else if (sortOder === 'ASC') {\r\n            setSetOrder('DSC');\r\n            dispatch(sortUsersByASC({ sortOpt: name }));\r\n        }\r\n        iconHandler(name);\r\n    };\r\n\r\n    // /. functions\r\n\r\n    useEffect(() => {\r\n        const validCondition =\r\n            !isTableDataLoading &&\r\n            !fetchUsersErrMsg &&\r\n            !isUsersDataEmpty &&\r\n            dataLength > 1;\r\n\r\n        if (validCondition) {\r\n            setValidConditionStatus(true);\r\n        } else {\r\n            setValidConditionStatus(false);\r\n        }\r\n    }, [isTableDataLoading, isUsersDataEmpty, fetchUsersErrMsg, dataLength]);\r\n\r\n    return (\r\n        <th\r\n            className=\"table__col table__col--head\"\r\n            onClick={() => isValidCondition && sortUsersData(name)}\r\n        >\r\n            {text}\r\n            <>\r\n                {sortOder === 'ASC' ? (\r\n                    <TiArrowSortedUp data-testid=\"arrow-up\" />\r\n                ) : (\r\n                    <FaSortDown data-testid=\"arrow-down\" />\r\n                )}\r\n            </>\r\n        </th>\r\n    );\r\n};\r\n\r\nexport default TableHeadTemplate;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Preloader from 'components/ui/Preloader/Preloader';\r\n\r\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\r\n\r\nimport { swithUsersDataEmptyStatus } from 'app/slices/tableSlice';\r\n\r\nimport TableBodyTemplate from './TableBodyTemplate';\r\nimport TableHeadTemplate from './TableHeadTemplate';\r\n\r\nimport './table.scss';\r\n\r\n// /. imports\r\n\r\nconst Table: React.FC = () => {\r\n    const {\r\n        filteredTableData,\r\n        isTableDataLoading,\r\n        fetchUsersErrMsg,\r\n        isUsersDataEmpty,\r\n        tableHeadTemplates\r\n    } = useAppSelector(state => state.tableSlice);\r\n\r\n    const [isError, setErorrStatus] = useState<boolean>(false);\r\n    const [isEmptyCase, setEmptyCaseStatus] = useState<boolean>(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    // /. hooks\r\n\r\n    useEffect(() => {\r\n        filteredTableData.length === 0\r\n            ? dispatch(swithUsersDataEmptyStatus(true))\r\n            : dispatch(swithUsersDataEmptyStatus(false));\r\n    }, [filteredTableData]);\r\n\r\n    useEffect(() => {\r\n        if (!isTableDataLoading && fetchUsersErrMsg) {\r\n            setErorrStatus(true);\r\n        } else {\r\n            setErorrStatus(false);\r\n        }\r\n    }, [isTableDataLoading, fetchUsersErrMsg]);\r\n\r\n    useEffect(() => {\r\n        const emptyCondition =\r\n            !isTableDataLoading && !fetchUsersErrMsg && isUsersDataEmpty;\r\n        if (emptyCondition) {\r\n            setEmptyCaseStatus(true);\r\n        } else {\r\n            setEmptyCaseStatus(false);\r\n        }\r\n    }, [isTableDataLoading, fetchUsersErrMsg, isUsersDataEmpty]);\r\n\r\n    // /. effects\r\n\r\n    return (\r\n        <div className=\"table-wrapper\">\r\n            <table\r\n                className={`table ${isTableDataLoading ? 'loading' : ''} ${\r\n                    isUsersDataEmpty ? 'empty' : ''\r\n                }`}\r\n            >\r\n                <thead className=\"table__head sticky\">\r\n                    <tr className=\"table__row table__row--head\">\r\n                        {tableHeadTemplates.map(item => {\r\n                            return (\r\n                                <TableHeadTemplate\r\n                                    key={item.id}\r\n                                    {...item}\r\n                                    isTableDataLoading={isTableDataLoading}\r\n                                    isUsersDataEmpty={isUsersDataEmpty}\r\n                                    fetchUsersErrMsg={fetchUsersErrMsg}\r\n                                    dataLength={filteredTableData.length}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"table__body\">\r\n                    {isTableDataLoading ? (\r\n                        <div className=\"table__preloader\">\r\n                            <Preloader />\r\n                        </div>\r\n                    ) : isError ? (\r\n                        <span className=\"error-message\">\r\n                            Error: {fetchUsersErrMsg}\r\n                        </span>\r\n                    ) : isEmptyCase ? (\r\n                        <span className=\"message\">No matches!</span>\r\n                    ) : (\r\n                        <>\r\n                            {filteredTableData.map(item => {\r\n                                return (\r\n                                    <TableBodyTemplate\r\n                                        key={item.id}\r\n                                        {...item}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { IoDocumentTextOutline } from 'react-icons/io5';\r\n\r\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\r\n\r\nimport { setRequestCount, filterUsers } from 'app/slices/tableSlice';\r\n\r\nimport { declinateByCount } from 'utils/helpers/declinateByCount';\r\n\r\nimport Form from 'components/ui/Form/Form';\r\n\r\nimport Table from 'components/ui/Table/Table';\r\n\r\nimport './mainPage.scss';\r\n\r\n// /. imports\r\n\r\nconst MainPage: React.FC = () => {\r\n    const { requestСount, isTableDataLoading, filteredTableData } =\r\n        useAppSelector(state => state.tableSlice);\r\n\r\n    const [text, setText] = useState<string>('заявок');\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    // /. hooks\r\n\r\n    useEffect(() => {\r\n        dispatch(setRequestCount(filteredTableData.length));\r\n        setText(\r\n            declinateByCount(filteredTableData.length, [\r\n                'заявка',\r\n                'заявки',\r\n                'заявок'\r\n            ])\r\n        );\r\n    }, [filteredTableData]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // reset filtering when page is re-rendered\r\n            dispatch(filterUsers({ filterProp: '', value: '' }));\r\n        };\r\n    }, []);\r\n\r\n    // /. effects\r\n\r\n    return (\r\n        <section className=\"main-page\">\r\n            <div className=\"main-page__wrapper\">\r\n                <div className=\"result\">\r\n                    <div className=\"result__wrapper\">\r\n                        <IoDocumentTextOutline\r\n                            size={'34px'}\r\n                            color={'#000'}\r\n                        />\r\n                        <h1\r\n                            className=\"result__text\"\r\n                            data-testid=\"counter\"\r\n                        >\r\n                            {isTableDataLoading ? '0' : requestСount} {text}\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n                <Form />\r\n                <Table />\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","export function declinateByCount(quantity: number, array: any[]): string {\r\n    quantity = Math.abs(quantity) % 100;\r\n\r\n    const case_1 = quantity % 10;\r\n\r\n    if (quantity > 10 && quantity < 20) {\r\n        return array[2];\r\n    }\r\n    if (case_1 > 1 && case_1 < 5) {\r\n        return array[1];\r\n    }\r\n    if (case_1 == 1) {\r\n        return array[0];\r\n    }\r\n\r\n    return array[2];\r\n}\r\n"],"names":["useInput","useState","value","setValue","dispatch","useAppDispatch","onInputChange","props","name","replace","filterUsers","filterProp","trim","id","options","isTableDataLoading","status","role","className","defaultValue","option","onChange","e","eventVal","target","disabled","map","item","formSelectTemplates","useAppSelector","state","formSlice","tableSlice","fetchUsersStatus","inputID","inputFIO","inputBIRTH","inputPHONE","inputIdRef","useRef","inputHandler","useEffect","current","focus","type","placeholder","onKeyDown","key","preventDefault","birth","phone","filial","isPaid","Закрыта","Новая","statuses","size","color","text","isUsersDataEmpty","fetchUsersErrMsg","dataLength","sortOder","setSetOrder","isValidCondition","setValidConditionStatus","fio","setStatus","sortUsersData","sortUsersByDSC","sortOpt","sortUsersByASC","iconHandler","onClick","filteredTableData","tableHeadTemplates","isError","setErorrStatus","isEmptyCase","setEmptyCaseStatus","length","swithUsersDataEmptyStatus","Preloader","requestСount","setText","setRequestCount","quantity","array","case_1","Math","abs","declinateByCount"],"sourceRoot":""}